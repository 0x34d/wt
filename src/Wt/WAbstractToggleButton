// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef WABSTRACTTOGGLEBUTTON_H_
#define WABSTRACTTOGGLEBUTTON_H_

#include <Wt/WFormWidget>

namespace Wt {

class WLabel;

/*! \brief An abstract base class for radio buttons and check boxes.
 *
 * A toggle button provides a button with a boolean state (checked or
 * unchecked), and a text label.
 *
 * To act on a change of the state, either connect a slot to the changed()
 * signal, or connect a slot to the checked() or unChecked() signals.
 *
 * The current state (checked or unchecked) may be inspected using the
 * isChecked() method.
 */
class WT_API WAbstractToggleButton : public WFormWidget
{
protected:
  /*! \brief Create an unchecked toggle button with empty label and optional
   *         parent.
   */
  WAbstractToggleButton(WContainerWidget *parent = 0);

  /*! \brief Create an unchecked toggle button with given text and optional
   *         parent.
   */
  WAbstractToggleButton(const WString& text, WContainerWidget *parent = 0);

  WAbstractToggleButton(bool withLabel, WContainerWidget *parent);

public:
  /*! \brief Change the text of the label.
   */
  void setText(const WString& text);

  /*! \brief Get the text of the label.
   */
  const WString text() const;

  /*! \brief Returns the state of the button.
   */
  bool isChecked() const { return state_ == Checked; }

  /*! \brief Change the state of the button.
   *
   * Does not emit one of the checked() or unChecked() signals.
   *
   * \sa setChecked(), setUnChecked()
   */
  void setChecked(bool);

  /*! \brief Set the button checked.
   *
   * Does not emit the checked() signal.
   *
   * \sa setChecked(bool)
   */
  virtual void setChecked();

  /*! \brief Set the button unChecked.
   *
   * Does not emit the unChecked() signal.
   *
   * \sa setChecked(bool)
   */
  virtual void setUnChecked();

  virtual void load();

public:
  /*! \brief %Signal emitted when the button gets checked.
   */
  EventSignal<>& checked();

  /*! \brief %Signal emitted when the button gets unChecked.
   */
  EventSignal<>& unChecked();

protected:
  CheckState state_;

  virtual DomElement *createDomElement(WApplication *app);
  virtual void getDomChanges(std::vector<DomElement *>& result,
			     WApplication *app);
  virtual void updateDom(DomElement& element, bool all);
  virtual void setFormData(const FormData& formData);
  virtual void propagateRenderOk(bool deep);
  virtual DomElementType domElementType() const;

  virtual WStatelessSlot *getStateless(Method method);

private:
  static const char *CHECKED_SIGNAL;
  static const char *UNCHECKED_SIGNAL;
  static const char *UNDETERMINATE_CLICK_SIGNAL;

  bool stateChanged_;
  CheckState prevState_;

  void undoSetChecked();
  void undoSetUnChecked();
  void setCheckState(CheckState state);

  friend class WCheckBox;
  friend class WRadioButton;
  friend class WButtonGroup;
};

}

#endif // WABSTRACTTOGGLEBUTTON_H_

// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef WDATEPICKER_H_
#define WDATEPICKER_H_

#include <Wt/WLineEdit>
#include <Wt/WDate>
#include <Wt/WJavaScriptSlot>
#include <set>

namespace Wt {

class WCalendar;
class WInteractWidget;
class WLineEdit;
class WTemplate;

/*! \class WDatePicker Wt/WDatePicker Wt/WDatePicker
 *  \brief A date picker.
 *
 * A date picker is implemented as a line edit with a popup calendar
 * icon to assist in selecting a date. Any date entered in the line
 * edit is reflected in the calendar, and vice-versa.
 *
 * In the future, a date picker may be implemented using a native
 * HTML5 component (a "date" input element), but by default, a
 * fallback is provided which uses a WCalendar for the date
 * selection. This calendar() may be accessed calendar().
 * 
 * The date format used by default is <tt>"dd/MM/yyyy"</tt> and can be
 * changed using setFormat(). At any time, the date set may be read
 * using date(), or can be changed using setDate().
 *
 * \if cpp
 * Usage example:
 * \code
 * Wt::WDatePicker *picker = new Wt::WDatePicker(this);
 * picker->setFormat("dd-MM-yyyy");
 * picker->setDate(Wt::WDate(1976, 6, 14));
 * \endcode
 * \endif
 *
 * <h3>i18n</h3>
 *
 * Internationalization of WDatePicker is mostly handled through the
 * internationalization mechanism of WDate. The 'Close' button can be
 * internationalized by overriding the default value for the
 * localization key Wt.DatePicker.Close.
 *
 * <h3>CSS</h3>
 *
 * The date picker is styled by the current CSS theme. The look can be
 * overridden using the <tt>Wt-datepicker-edit</tt> (the widget
 * itself), the <tt>Wt-datepicker</tt> (the popup) and
 * <tt>Wt-outset</tt> CSS classes; the calendar itself can be styled
 * as documented in WCalendar.
 *
 * <TABLE border="0" align="center"> <TR> <TD> 
 * \image html WDatePicker-default-1.png "Example of a WDatePicker (default theme) 
 * </TD> <TD> 
 * \image html WDatePicker-polished-1.png "Example of a WDatePicker (polished theme) 
 * </TD> </TR> </TABLE>
 */
class WT_API WDatePicker : public WLineEdit
{
public:
  /*! \brief Create a new date picker.
   *
   * A WDateValidator is configured for the line edit.
   */
  WDatePicker(WContainerWidget *parent = 0);

  /*! \brief Destructor.
   */
  ~WDatePicker();

  /*! \brief Configures whether a native HTML5 control should be used.
   *
   * When \p native, the new "date" input element, specified by HTML5
   * and when implemented by the browser, is used rather than the
   * built-in element (although at the moment (January 2012) no
   * browser has a decent implementation). The native control is
   * styled by the browser (usually in sync with the OS) rather than
   * through the theme chosen.
   *
   * The default is \p false (as native support is not well implemented).
   */
  void setNativeControl(bool nativeControl);

  /*! \brief Returns whether a native HTML5 control is used.
   *
   * Taking into account the preference for a native control,
   * configured using setNativeControl(), this method returns whether
   * a native control is actually being used.
   */
  bool nativeControl() const;

  /*! \brief Sets the format used for parsing or writing the date in
   *         the line edit.
   *
   * Sets the format used for representing the date in the line edit.
   * If the line edit has a WDateValidator configured for it, then also
   * there the format is updated.
   *
   * The default format is <tt>'dd/MM/yyyy'</tt>.
   *
   * \sa format(), WDate::toString()
   */
  void setFormat(const WT_USTRING& format);

  /*! \brief Returns the format.
   *
   * \sa setFormat()
   */
  const WT_USTRING& format() const;

  /*! \brief Returns the calendar widget.
   *
   * Returns the calendar widget. This returns 0 when using a native
   * implementation.
   */
  WCalendar *calendar() const;

  /*! \brief Returns the line edit (<b>deprecated</b>).
   *
   * Returns <tt>this</tt>.
   *
   * \deprecated use <tt>this</tt> instead.
   */
  WLineEdit *lineEdit() { return this; }

  /*! \brief Returns the current date.
   *
   * This interprets the current line edit text as a date.
   *
   * \if cpp
   * Returns an invalid date (for which WDate::isValid() returns
   * \c false) if the date could not be parsed using the current
   * format(). <br>
   * \elseif java
   * Returns \c null if the date could not be parsed using the current
   * format(). <br>
   * \endif
   *
   * \sa setDate(), WDate::fromString(), WLineEdit::text()
   */
  WDate date() const;

  /*! \brief Sets the current date.
   *
   * Does nothing if the current date is \p Null.
   *
   * \sa date()
   */
  void setDate(const WDate& date);

  /*! \brief Sets whether the widget is enabled (<b>deprecated</b>).
   *
   * This is the oppositie of setDisabled().
   *
   * \deprecated This is a legacy method, use setDisabled() instead.
   */
  void setEnabled(bool enabled);

  /*! \brief Hide/unhide the widget.
   */
  virtual void setHidden(bool hidden,
			 const WAnimation& animation = WAnimation());

  /*! \brief Sets the bottom of the valid date range.
   */
  void setBottom(const WDate& bottom);

  /*! \brief Returns the bottom date of the valid range.
   */
  WDate bottom() const;
  
  /*! \brief Sets the top of the valid date range.
   */
  void setTop(const WDate& top);

  /*! \brief Returns the top date of the valid range.
   */
  WDate top() const;

  /*! \brief Controls how the calendar popup is positioned.
   *
   * When \p global is \c true, then the popup will position itself
   * globally. This avoids that the popup is affected by enclosing
   * parents with overflow settings that clip the popup. This makes
   * the popup however no longer follow the line edit.
   *
   * The default is \c false.
   */
  void setGlobalPopup(bool global);

  /*! \brief Shows or hides the popup.
   */
  void setPopupVisible(bool visible);

  virtual void setText(const WT_USTRING& text);

protected:
  virtual void updateDom(DomElement& element, bool all);
  virtual void render(WFlags<RenderFlag> flags);
  virtual void setFormData(const FormData& formData);
  virtual void propagateSetEnabled(bool enabled);
  virtual int boxPadding(Orientation orientation) const;

private:
  bool preferNative_;
  WTemplate *popup_;
  WCalendar *calendar_;
  bool global_;
  JSignal<> jsPopup_;
  boost::signals::connection globalClickConnection_;

  void defineJavaScript();
  void connectJavaScript(Wt::EventSignalBase& s,
			 const std::string& methodName);
  void setup(bool native);
  bool parseValue(const WT_USTRING& text);
  void done();
  void onPopup();

  void setFromCalendar();
  void setFromLineEdit();
};

}

#endif // WDATEPICKER_H_

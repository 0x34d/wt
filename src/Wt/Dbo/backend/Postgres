// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 *
 * Contributed by: Hilary Cheng
 */
#ifndef WT_DBO_BACKEND_POSTGRES_H_
#define WT_DBO_BACKEND_POSTGRES_H_

#include <Wt/Dbo/SqlConnection>
#include <Wt/Dbo/SqlStatement>

struct pg_conn;
typedef struct pg_conn PGconn;

namespace Wt {
  namespace Dbo {
    namespace backend {

/*! \class Postgres Wt/Dbo/backend/Postgres Wt/Dbo/backend/Postgres
 *  \brief An PostgreSQL connection
 *
 * This class provides the backend implementation for PostgreSQL databases.
 *
 * \ingroup dbo
 */
class Postgres : public SqlConnection
{
public:
  /*! \brief Opens a new PostgreSQL backend connection.
   *
   * The \p db may be any of the values supported by PQconnectdb().
   */
  Postgres(const std::string& db);

  /*! \brief Destructor.
   *
   * Closes the connection.
   */
  ~Postgres();

  bool connect(const std::string& db);

  virtual SqlStatement *prepareStatement(const std::string& sql);
  
  virtual std::string autoincrementSql() const;
  virtual std::string autoincrementType() const;
  virtual std::string autoincrementInsertSuffix() const;
  virtual const char *dateTimeType(SqlDateTimeType type) const;
  virtual const char *blobType() const;

  virtual void startTransaction();
  virtual void commitTransaction();
  virtual void rollbackTransaction();
  void executeSql(const std::string &sql);

private:
  PGconn     *conn;
};

    }
  }
}

#endif // WT_DBO_BACKEND_POSTGRES_H_

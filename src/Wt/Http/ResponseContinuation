// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2009 Emweb bvba, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef HTTP_RESPONSE_CONTINUATION_H_
#define HTTP_RESPONSE_CONTINUATION_H_

#include <Wt/WDllDefs.h>
#include <boost/any.hpp>

namespace Wt {
  
  class WResource;
  class WebResponse;
  class WebSession;

  /*! \brief Namespace for objects directly related to HTTP */
  namespace Http {

    class Response;

/*! \brief Enumeration that indicates a response continuation type.
 *
 * \sa Response::createContinuation()
 */
enum ContinuationType {
  AsyncContinuation,        //!< Asynchronous I/O continuation
  ServerEventContinuation
};

/*! \class ResponseContinuation Wt/Http/ResponseContinuation Wt/Http/ResponseContinuation
 *  \brief A response continuation object.
 *
 * A response continuation object is used to keep track of a continued
 * response, i.e. a response that is created in several parts.
 *
 * You may associate data with the object using setData().
 *
 * \sa Response::createContinuation(), Request::continuation()
 */
class WT_API ResponseContinuation
{
public:
  /*! \brief Return the continuation type.
   *
   * \sa Response::createContinuation()
   */
  ContinuationType type() { return type_; }

  /*! \brief Set data associated with the continuation.
   *
   * You could do this to keep track of the state of sending the data
   * for a WResource.
   */
  void setData(const boost::any& data);

  /*! \brief Return data associated with the continuation.
   *
   * \sa setData()
   */
  boost::any data() { return data_; }

  /*! \brief Return the resource.
   */
  WResource *resource() const { return resource_; }

  /*
   * Only useful for server-side events: force continuation.
   */
  void doContinue();

private:
  ContinuationType  type_;
  WResource        *resource_;
  WebResponse      *response_;
  boost::any        data_;

  ResponseContinuation(ContinuationType type,
		       WResource *resource, WebResponse *response);
  ResponseContinuation(const ResponseContinuation&);
  ~ResponseContinuation();

  void         stop();
  WebResponse *response() { return response_; }
  static void  callBack(void *callbackData);

  friend class Wt::WResource;
  friend class Wt::WebSession;
  friend class Response;
};

  }
}

#endif // HTTP_RESPONSE_CONTINUATION_H_
